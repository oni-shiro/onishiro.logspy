# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Build & Publish Broker + Client (Multi-OS)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          - os: windows-latest
            runtime: win-x64
          - os: ubuntu-latest
            runtime: linux-x64

    steps:
      # 1. Checkout code
      - uses: actions/checkout@v4

      # 2. Setup .NET
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      # 3. Restore dependencies
      - name: Restore
        run: dotnet restore onishiro.logspy.sln

      # 4. Build solution
      - name: Build
        run: dotnet build onishiro.logspy.sln --no-restore --configuration Release

      # 5. Publish Broker
      - name: Publish Broker
        run: |
          dotnet publish src/onishiro.logspy.broker/onishiro.logspy.broker.csproj \
            --configuration Release \
            --runtime ${{ matrix.runtime }} \
            --self-contained true \
            /p:PublishTrimmed=false \
            -o artifacts/broker-${{ matrix.runtime }}

      # 6. Add service install scripts for broker
      - name: Add Broker Service Files
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cat <<'EOF' > artifacts/broker-${{ matrix.runtime }}/install-broker-service.ps1
          param(
              [string]$ServiceName = "OnishiroLogSpyBroker",
              [string]$DisplayName = "Onishiro LogSpy Broker",
              [string]$Description = "LogSpy Broker running as a Windows Service."
          )

          $exePath = Join-Path $PSScriptRoot "onishiro.logspy.broker.exe"

          New-Service -Name $ServiceName `
              -BinaryPathName $exePath `
              -DisplayName $DisplayName `
              -Description $Description `
              -StartupType Automatic

          Start-Service $ServiceName
          Write-Host "Service '$ServiceName' installed and started."
          EOF
          fi

          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            cat <<'EOF' > artifacts/broker-${{ matrix.runtime }}/logspy-broker.service
          [Unit]
          Description=Onishiro LogSpy Broker
          After=network.target

          [Service]
          WorkingDirectory=/opt/logspy/broker
          ExecStart=/opt/logspy/broker/onishiro.logspy.broker
          Restart=always
          User=logspy
          Environment=DOTNET_PRINT_TELEMETRY_MESSAGE=false
          Environment=ASPNETCORE_ENVIRONMENT=Production

          [Install]
          WantedBy=multi-user.target
          EOF
          fi
        shell: bash

      # 7. Publish Client
      - name: Publish Client
        run: |
          dotnet publish src/onishiro.logspy.client/onishiro.logspy.client.csproj \
            --configuration Release \
            --runtime ${{ matrix.runtime }} \
            --self-contained true \
            /p:PublishTrimmed=false \
            -o artifacts/client-${{ matrix.runtime }}

      # 8. Upload broker artifact
      - name: Upload Broker Artifact
        uses: actions/upload-artifact@v4
        with:
          name: broker-${{ matrix.runtime }}
          path: artifacts/broker-${{ matrix.runtime }}

      # 9. Upload client artifact
      - name: Upload Client Artifact
        uses: actions/upload-artifact@v4
        with:
          name: client-${{ matrix.runtime }}
          path: artifacts/client-${{ matrix.runtime }}
