name: Build & Publish Broker + Client (Multi-OS with Release)

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*' # Triggers when you push a version tag

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          - os: windows-latest
            runtime: win-x64
          - os: ubuntu-latest
            runtime: linux-x64

    steps:
      # 1. Checkout code
      - uses: actions/checkout@v4

      # 2. Setup .NET
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      # 3. Restore dependencies
      - name: Restore
        run: dotnet restore onishiro.logspy.sln

      # 4. Build
      - name: Build
        run: dotnet build onishiro.logspy.sln --no-restore --configuration Release

      # 5. Publish Broker (Linux)
      - name: Publish Broker (Linux)
        if: runner.os != 'Windows'
        run: |
          dotnet publish src/onishiro.logspy.broker/onishiro.logspy.broker.csproj \
            --configuration Release \
            --runtime ${{ matrix.runtime }} \
            --self-contained true \
            /p:PublishTrimmed=false \
            -o artifacts/broker-${{ matrix.runtime }}

      # 6. Publish Broker (Windows)
      - name: Publish Broker (Windows)
        if: runner.os == 'Windows'
        run: dotnet publish src/onishiro.logspy.broker/onishiro.logspy.broker.csproj --configuration Release --runtime ${{ matrix.runtime }} --self-contained true /p:PublishTrimmed=false -o artifacts/broker-${{ matrix.runtime }}

      # 7. Add Service Install Scripts
      - name: Add Broker Service Files
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            mkdir -p artifacts/broker-${{ matrix.runtime }}/scripts
            cat <<'EOF' > artifacts/broker-${{ matrix.runtime }}/scripts/install-broker-service.ps1
          param(
              [string]$ServiceName = "OnishiroLogSpyBroker",
              [string]$DisplayName = "Onishiro LogSpy Broker",
              [string]$Description = "LogSpy Broker running as a Windows Service."
          )

          $exePath = Join-Path $PSScriptRoot "onishiro.logspy.broker.exe"

          New-Service -Name $ServiceName `
              -BinaryPathName $exePath `
              -DisplayName $DisplayName `
              -Description $Description `
              -StartupType Automatic

          Start-Service $ServiceName
          Write-Host "Service '$ServiceName' installed and started."
          EOF
          fi

          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            mkdir -p artifacts/broker-${{ matrix.runtime }}/scripts
            cat <<'EOF' > artifacts/broker-${{ matrix.runtime }}/scripts/logspy-broker.service
          [Unit]
          Description=Onishiro LogSpy Broker
          After=network.target

          [Service]
          WorkingDirectory=/opt/logspy/broker
          ExecStart=/opt/logspy/broker/onishiro.logspy.broker
          Restart=always
          User=logspy
          Environment=DOTNET_PRINT_TELEMETRY_MESSAGE=false
          Environment=ASPNETCORE_ENVIRONMENT=Production

          [Install]
          WantedBy=multi-user.target
          EOF
          fi
        shell: bash

      # 8. Publish Client (Linux)
      - name: Publish Client (Linux)
        if: runner.os != 'Windows'
        run: |
          dotnet publish src/onishiro.logspy.client/onishiro.logspy.client.csproj \
            --configuration Release \
            --runtime ${{ matrix.runtime }} \
            --self-contained true \
            /p:PublishTrimmed=false \
            -o artifacts/client-${{ matrix.runtime }}

      # 9. Publish Client (Windows)
      - name: Publish Client (Windows)
        if: runner.os == 'Windows'
        run: dotnet publish src/onishiro.logspy.client/onishiro.logspy.client.csproj --configuration Release --runtime ${{ matrix.runtime }} --self-contained true /p:PublishTrimmed=false -o artifacts/client-${{ matrix.runtime }}

      # 10. Upload artifacts to Actions
      - name: Upload Broker Artifact
        uses: actions/upload-artifact@v4
        with:
          name: broker-${{ matrix.runtime }}
          path: artifacts/broker-${{ matrix.runtime }}

      - name: Upload Client Artifact
        uses: actions/upload-artifact@v4
        with:
          name: client-${{ matrix.runtime }}
          path: artifacts/client-${{ matrix.runtime }}

#      # 10. Zip artifacts before uploading
#       - name: Zip Broker
#         run: |
#           cd artifacts/broker-${{ matrix.runtime }}
#           zip -r ../broker-${{ matrix.runtime }}.zip .
#         shell: bash
      
#       - name: Zip Client
#         run: |
#           cd artifacts/client-${{ matrix.runtime }}
#           zip -r ../client-${{ matrix.runtime }}.zip .
#         shell: bash

# # 11. If this is a tagged release, upload to GitHub Releases
#       - name: Create GitHub Release
#         if: startsWith(github.ref, 'refs/tags/')
#         uses: softprops/action-gh-release@v1
#         with:
#           files: |
#             artifacts/broker-${{ matrix.runtime }}.zip
#             artifacts/client-${{ matrix.runtime }}.zip
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
